<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Commons.Repository</name>
    </assembly>
    <members>
        <member name="T:Commons.Repository.EntityBase`1">
            <summary>
            Basic implementation of an <see cref="T:Commons.Repository.IEntity`1"/>.
            </summary>
            <typeparam name="TId">Type of its identifier property.</typeparam>
        </member>
        <member name="P:Commons.Repository.EntityBase`1.Id">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.EntityBase`1.Equals(Commons.Repository.IEntity{`0})">
            <summary>
            Determines whether this instance is equivalent to the given instance.
            </summary>
            <param name="other">Instance to be tested for equality with this instance.</param>
            <returns><code>true</code> if both instances are considered equal (see remarks), false otherwise.</returns>
            <remarks>
            For this base implementation, two instances are equal if both <see cref="P:Commons.Repository.EntityBase`1.Id"/> properties
            are equal (by calling its <see cref="M:System.Object.Equals(System.Object)"/> method)
            and if both instances types have the same <see cref="P:System.Type.FullName"/> property value.
            This process will mark as distinct two instances with same <see cref="P:Commons.Repository.EntityBase`1.Id"/> but different classes.
            </remarks>
        </member>
        <member name="M:Commons.Repository.EntityBase`1.Equals(System.Object)">
            <summary>
            Determines whether this instance is equivalent to the given instance.
            </summary>
            <param name="obj">Instance to be tested for equality with this instance.</param>
            <returns><code>true</code> if both instances are considered equal (see remarks), false otherwise.</returns>
            <remarks>
            This methods first verify <paramref name="obj"/> is of type <see cref="T:Commons.Repository.EntityBase`1"/>
            and then invokes <see cref="M:Commons.Repository.EntityBase`1.Equals(Commons.Repository.IEntity{`0})"/>.
            </remarks>
        </member>
        <member name="M:Commons.Repository.EntityBase`1.GetHashCode">
            <summary>
            Returns the hash code for this instance..
            </summary>
            <returns>The hash code of this instance.</returns>
            <remarks>
            The basic implementation invokes the method <see cref="M:System.Object.GetHashCode"/>
            of <see cref="P:Commons.Repository.EntityBase`1.Id"/>.
            </remarks>
        </member>
        <member name="T:Commons.Repository.EntityBase">
            <summary>
            Basic implementation of an <see cref="T:Commons.Repository.IEntity`1"/> of type <code>long</code>.
            </summary>
        </member>
        <member name="T:Commons.Repository.IEntity`1">
            <summary>
            Represents a business object (Entity) which is unequivocally identified by and Id.
            </summary>
            <typeparam name="TId">Type of its identifier property.</typeparam>
            <remarks>
            All entities implemented using this interface should be able to be uniquely identified by the <see cref="P:Commons.Repository.IEntity`1.Id"/>
            property and compared to other <see cref="T:Commons.Repository.IEntity`1"/>
            It is recommended to also override the <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> methods.
            </remarks>
        </member>
        <member name="P:Commons.Repository.IEntity`1.Id">
            <summary>
            Gets or sets the entity's id.
            </summary>
        </member>
        <member name="T:Commons.Repository.IEntity">
            <summary>
            Represents a business object (Entity) which is unequivocally identified by and Id of type <code>long</code>.
            </summary>
            <remarks>
            It is a typed extension of <see cref="T:Commons.Repository.IEntity`1"/> with <code>long</code> as its <see cref="P:Commons.Repository.IEntity`1.Id"/> type.
            </remarks>
        </member>
        <member name="T:Commons.Repository.IRepository`2">
            <summary>
            Defines the contract for the Generic Repository pattern.
            </summary>
            <typeparam name="TEntity">Type of the entity that this repository will manage.</typeparam>
            <typeparam name="TId">Type of the <typeparamref name="TEntity"/>'s id.</typeparam>
        </member>
        <member name="M:Commons.Repository.IRepository`2.GetByIdAsync(`1)">
            <summary>
            Retrieves the entity identified by the given <paramref name="id"/> from the store asynchronously.
            </summary>
            <param name="id">Id of the entity to retrieve.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the
            result of executing the operation, with the expected entity if success.
            </returns>
        </member>
        <member name="M:Commons.Repository.IRepository`2.GetAllAsync">
            <summary>
            Retrieves all the entities from the data store asynchronously.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the
            result of executing the operation, with the list of entities if success.
            </returns>
        </member>
        <member name="M:Commons.Repository.IRepository`2.AddAsync(`0)">
            <summary>
            Adds the given entity to the data store asynchronously.
            </summary>
            <param name="entity"><typeparamref name="TEntity"/>'s instance to be added.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the
            result of executing the operation with the added entity if success.
            </returns>
        </member>
        <member name="M:Commons.Repository.IRepository`2.UpdateAsync(`0)">
            <summary>
            Updates (put) the given entity to the data store asynchronously.
            </summary>
            <param name="entity"><typeparamref name="TEntity"/>'s instance to be updated (put).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the
            result of executing the operation with the updated entity if success.
            </returns>
        </member>
        <member name="M:Commons.Repository.IRepository`2.RemoveByIdAsync(`1)">
            <summary>
            Removes the entity identified by the given <paramref name="id"/> from the data store asynchronously.
            </summary>
            <param name="id">Id of the entity to remove.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the 
            result of executing the operation with the removed entity if success.
            </returns>
        </member>
        <member name="M:Commons.Repository.IRepository`2.RemoveAsync(`0)">
            <summary>
            Removes the given entity from the data store asynchronously.
            </summary>
            <param name="entity"><typeparamref name="TEntity"/>'s instance to be removed.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that, when finished, will contain a representation of the 
            result of executing the operation with the removed entity if success.
            </returns>
        </member>
        <member name="T:Commons.Repository.IRepository`1">
            <summary>
            Defines the contract for the Generic Repository Pattern.
            </summary>
            <typeparam name="TEntity">Type of the entity that this repository will manage.</typeparam>
            <remarks>
            It is a typed extension of <see cref="T:Commons.Repository.IRepository`2"/> with <code>long</code>
            as its id type.
            </remarks>
        </member>
        <member name="T:Commons.Repository.IUnitOfWork">
            <summary>
            Defines the contract for the Unit of Work pattern.
            </summary>
        </member>
        <member name="P:Commons.Repository.IUnitOfWork.Connection">
            <summary>
            Gets the <see cref="T:System.Data.IDbConnection"/>'s instance that 
            represents the connection to the underlying Database.
            </summary>
        </member>
        <member name="P:Commons.Repository.IUnitOfWork.Transaction">
            <summary>
            Gets the <see cref="T:System.Data.IDbTransaction"/>'s instance that
            represents the current transaction in progress.
            <code>null</code> if there's no transaction in progress for the
            <see cref="P:Commons.Repository.IUnitOfWork.Connection"/>.
            </summary>
        </member>
        <member name="M:Commons.Repository.IUnitOfWork.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <summary>
            Begins a new transaction over the <see cref="P:Commons.Repository.IUnitOfWork.Connection"/>.
            </summary>
            <param name="isolationLevel">
            Specifies the transaction locking behavior for the transaction.
            It depends on the underlying database providers.
            </param>
            <returns><see cref="T:Commons.OperationResult.SuccessResult"/> if the transaction could be started, <see cref="T:Commons.OperationResult.FailureResult"/> otherwise.</returns>
            <remarks>
            If this method is invoked when a transaction is already in progress for the <see cref="P:Commons.Repository.IUnitOfWork.Connection"/>, 
            an <see cref="T:Commons.OperationResult.ExceptionResult"/> will be generated wrapping an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="M:Commons.Repository.IUnitOfWork.Commit">
            <summary>
            Commit the currently in progress transaction.
            </summary>
            <returns><see cref="T:Commons.OperationResult.SuccessResult"/> if the current in progress transaction was committed successfully, <see cref="T:Commons.OperationResult.FailureResult"/> otherwise.</returns>
            <remarks>
            If this method is invoked when there's no transaction in progress, an <see cref="T:Commons.OperationResult.ExceptionResult"/> will be generated
            wrapping an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="M:Commons.Repository.IUnitOfWork.Rollback">
            <summary>
            Rollbacks the currently in progress transaction.
            </summary>
            <returns><see cref="T:Commons.OperationResult.SuccessResult"/> if the current in progress transaction was committed successfully, <see cref="T:Commons.OperationResult.FailureResult"/> otherwise.</returns>
            <remarks>
            If this method is invoked when there's no transaction in progress, an <see cref="T:Commons.OperationResult.ExceptionResult"/> will be generated
            wrapping an <see cref="T:System.InvalidOperationException"/>.
            </remarks>
        </member>
        <member name="T:Commons.Repository.RepositoryBase`2">
            <summary>
            Basic implementation of an <see cref="T:Commons.Repository.IRepository`2"/>
            </summary>
            <typeparam name="TEntity">Type of the entity that this repository will manage.</typeparam>
            <typeparam name="TId">Type of the <typeparamref name="TEntity"/>'s id.</typeparam>
        </member>
        <member name="P:Commons.Repository.RepositoryBase`2.UnitOfWork">
            <summary>
            Gets the service that implements the Unit of Work pattern
            that will be used to perform the operations on this repository.
            </summary>
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.#ctor(Commons.Repository.IUnitOfWork)">
            <summary>
            Creates a new instance of <see cref="T:Commons.Repository.RepositoryBase`2"/>.
            </summary>
            <param name="unitOfWork">
            Service that implements the Unit of Work pattern that will be used to perform the operations on this repository.
            </param>
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.GetByIdAsync(`1)">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.GetAllAsync">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.AddAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.UpdateAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.RemoveByIdAsync(`1)">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.RepositoryBase`2.RemoveAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:Commons.Repository.RepositoryBase`1">
            <summary>
            Basic implementation of an <see cref="T:Commons.Repository.IRepository`2"/> with id of type <code>long</code>.
            </summary>
            <typeparam name="TEntity">Type of the entity that this repository will manage.</typeparam>
        </member>
        <member name="M:Commons.Repository.RepositoryBase`1.#ctor(Commons.Repository.IUnitOfWork)">
            <inheritdoc />
        </member>
        <member name="T:Commons.Repository.UnitOfWork">
            <summary>
            Implementation of <see cref="T:Commons.Repository.IUnitOfWork"/> to work with ADO.NET's <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="P:Commons.Repository.UnitOfWork.Connection">
            <inheritdoc />
        </member>
        <member name="P:Commons.Repository.UnitOfWork.Transaction">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.UnitOfWork.#ctor(System.Data.IDbConnection)">
            <summary>
            Creates a new instance of <see cref="T:Commons.Repository.UnitOfWork"/>.
            </summary>
            <param name="connection">
            <see cref="T:System.Data.IDbConnection"/>'s instance to be used to perform all Db operation that 
            this UoW will relate to.
            </param>
        </member>
        <member name="M:Commons.Repository.UnitOfWork.BeginTransaction(System.Nullable{System.Data.IsolationLevel})">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.UnitOfWork.Commit">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.UnitOfWork.Rollback">
            <inheritdoc />
        </member>
        <member name="M:Commons.Repository.UnitOfWork.Dispose(System.Boolean)">
            <summary>
            Automatically generated implementation of the IDisposable pattern.
            </summary>
        </member>
        <member name="M:Commons.Repository.UnitOfWork.DisposeTransaction">
            <summary>
            Automatically generated implementation of the IDisposable pattern.
            </summary>
        </member>
        <member name="M:Commons.Repository.UnitOfWork.Dispose">
            <summary>
            Automatically generated implementation of the IDisposable pattern.
            </summary>
        </member>
    </members>
</doc>
